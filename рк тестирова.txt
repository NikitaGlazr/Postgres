using System;

namespace ConsoleMinMax
{
    internal class Program
    {
        static void Main(string[] args)
        {
            double[] A = { 1.2, 3.4, -2.5, 7.8, 0.0 };
            int N = A.Length;

            int minIndex = NMin(A, N);
            int maxIndex = NMax(A, N);

            Console.WriteLine("Индекс минимального элемента: " + minIndex);
            Console.WriteLine("Индекс максимального элемента: " + maxIndex);
        }

        static int NMin(double[] A, int N)
        {
            int minIndex = 0;
            for (int i = 1; i < N; i++)
            {
                if (A[i] < A[minIndex])
                {
                    minIndex = i;
                }
            }
            return minIndex;
        }

        static int NMax(double[] A, int N)
        {
            int maxIndex = 0;
            for (int i = 1; i < N; i++)
            {
                if (A[i] > A[maxIndex])
                {
                    maxIndex = i;
                }
            }
            return maxIndex;
        }
    }
}













using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;


namespace UnitTestProject
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestMethod_NMin_ShouldReturnCorrectIndex()
        {
            // Arrange
            double[] A = new double[] { 5.0, 3.0, 1.0, 4.0, 2.0 };
            int expected = 2;

            // Act
            int actual = NMin(A, A.Length);

            // Assert
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void TestMethod_NMax_ShouldReturnCorrectIndex()
        {
            // Arrange
            double[] A = new double[] { 5.0, 3.0, 1.0, 4.0, 2.0 };
            int expected = 0;

            // Act
            int actual = NMax(A, A.Length);

            // Assert
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void TestMethod_NMin_ShouldReturnZeroForSingleElementArray()
        {
            // Arrange
            double[] A = new double[] { 5.0 };
            int expected = 0;

            // Act
            int actual = NMin(A, A.Length);

            // Assert
            Assert.AreEqual(expected, actual);
        }



        static int NMin(double[] A, int N)
        {
            int minIndex = -1;
            for (int i = 0; i < N; i++)
            {
                if (minIndex == -1 || A[i] < A[minIndex])
                {
                    minIndex = i;
                }
            }
            return minIndex;
        }

        static int NMax(double[] A, int N)
        {
            int maxIndex = -1;
            for (int i = 0; i < N; i++)
            {
                if (maxIndex == -1 || A[i] > A[maxIndex])
                {
                    maxIndex = i;
                }
            }
            return maxIndex;
        }

    }
}
















using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace UnitTestProject
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestMethod1()
        {
            string input = "";
            string expected = "";
            string actual = NewStr(input);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void TestMethod2()
        {
            string input = "   Hello";
            string expected = "Hello";
            string actual = NewStr(input);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void TestMethod3()
        {
            string input = "Hello   ";
            string expected = "Hello";
            string actual = NewStr(input);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void TestMethod4()
        {
            string input = "   Hello   ";
            string expected = "Hello";
            string actual = NewStr(input);
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void TestMethod5()
        {
            string input = "Hello";
            string expected = "Hello";
            string actual = NewStr(input);
            Assert.AreEqual(expected, actual);
        }



        static string NewStr(string S)
        {
            return S.Trim();
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Consol
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Enter a string: ");
            string input = Console.ReadLine();

            string result = NewStr(input);

            Console.WriteLine("Result: " + result);
        }

        static string NewStr(string S)
        {
            return S.Trim();
        }
    }
}

